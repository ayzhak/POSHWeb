/* tslint:disable */
/* eslint-disable */
/**
 * POSHWeb
 * Api by POSHWeb platform.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: isaac.wuerth@outlook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InputParameter
 */
export interface InputParameter {
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    'value'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InputParameter
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    'type'?: string | null;
    /**
     * 
     * @type {JobParameterState}
     * @memberof InputParameter
     */
    'state'?: JobParameterState;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'fullPath'?: string | null;
    /**
     * 
     * @type {JobState}
     * @memberof Job
     */
    'state'?: JobState;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'content'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'contentHash'?: string | null;
    /**
     * 
     * @type {Array<InputParameter>}
     * @memberof Job
     */
    'parameters'?: Array<InputParameter> | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'log'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JobParameterState = {
    NotValidated: 'NotValidated',
    Valid: 'Valid',
    InvalidLength: 'InvalidLength',
    NotMatchingWithRegex: 'NotMatchingWithRegex',
    NumberNotInRange: 'NumberNotInRange',
    ItemCountNotInRange: 'ItemCountNotInRange',
    ValueNotInPredefinedSet: 'ValueNotInPredefinedSet'
} as const;

export type JobParameterState = typeof JobParameterState[keyof typeof JobParameterState];


/**
 * 
 * @export
 * @enum {string}
 */

export const JobState = {
    Created: 'Created',
    Running: 'Running',
    Finished: 'Finished',
    Failed: 'Failed',
    Validating: 'Validating',
    Invalid: 'Invalid'
} as const;

export type JobState = typeof JobState[keyof typeof JobState];


/**
 * 
 * @export
 * @interface PSParameter
 */
export interface PSParameter {
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameter
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'default'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PSParameter
     */
    'mandatory'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PSParameter
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'errorMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameter
     */
    'helpMessage'?: string | null;
    /**
     * 
     * @type {PSParameterOptions}
     * @memberof PSParameter
     */
    'options'?: PSParameterOptions;
}
/**
 * 
 * @export
 * @interface PSParameterOptions
 */
export interface PSParameterOptions {
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'minLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'maxLength'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameterOptions
     */
    'regexString'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'minValue'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'maxValue'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'minCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PSParameterOptions
     */
    'maxCount'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PSParameterOptions
     */
    'validValues'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof PSParameterOptions
     */
    'scriptBlock'?: string | null;
}
/**
 * 
 * @export
 * @interface PSScript
 */
export interface PSScript {
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PSScript
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'fullPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'contentHash'?: string | null;
    /**
     * 
     * @type {Array<PSParameter>}
     * @memberof PSScript
     */
    'parameters'?: Array<PSParameter> | null;
    /**
     * 
     * @type {string}
     * @memberof PSScript
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface SimpleInputParameter
 */
export interface SimpleInputParameter {
    /**
     * 
     * @type {string}
     * @memberof SimpleInputParameter
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleInputParameter
     */
    'value'?: string | null;
}

/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1JobIdGet', 'id', id)
            const localVarPath = `/api/v1/Job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobGet(options?: any): AxiosPromise<Array<Job>> {
            return localVarFp.apiV1JobGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobIdGet(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.apiV1JobIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public apiV1JobGet(options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).apiV1JobGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public apiV1JobIdGet(id: number, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).apiV1JobIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScriptApi - axios parameter creator
 * @export
 */
export const ScriptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Script`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ScriptIdGet', 'id', id)
            const localVarPath = `/api/v1/Script/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<SimpleInputParameter>} [simpleInputParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptIdRunPost: async (id: number, simpleInputParameter?: Array<SimpleInputParameter>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ScriptIdRunPost', 'id', id)
            const localVarPath = `/api/v1/Script/{id}/run`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; v=1.0';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simpleInputParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScriptApi - functional programming interface
 * @export
 */
export const ScriptApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScriptApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScriptGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PSScript>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScriptGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScriptIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PSScript>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScriptIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<SimpleInputParameter>} [simpleInputParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScriptIdRunPost(id: number, simpleInputParameter?: Array<SimpleInputParameter>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScriptIdRunPost(id, simpleInputParameter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScriptApi - factory interface
 * @export
 */
export const ScriptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScriptApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptGet(options?: any): AxiosPromise<Array<PSScript>> {
            return localVarFp.apiV1ScriptGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptIdGet(id: number, options?: any): AxiosPromise<PSScript> {
            return localVarFp.apiV1ScriptIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<SimpleInputParameter>} [simpleInputParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScriptIdRunPost(id: number, simpleInputParameter?: Array<SimpleInputParameter>, options?: any): AxiosPromise<Job> {
            return localVarFp.apiV1ScriptIdRunPost(id, simpleInputParameter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScriptApi - object-oriented interface
 * @export
 * @class ScriptApi
 * @extends {BaseAPI}
 */
export class ScriptApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1ScriptGet(options?: AxiosRequestConfig) {
        return ScriptApiFp(this.configuration).apiV1ScriptGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1ScriptIdGet(id: number, options?: AxiosRequestConfig) {
        return ScriptApiFp(this.configuration).apiV1ScriptIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Array<SimpleInputParameter>} [simpleInputParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1ScriptIdRunPost(id: number, simpleInputParameter?: Array<SimpleInputParameter>, options?: AxiosRequestConfig) {
        return ScriptApiFp(this.configuration).apiV1ScriptIdRunPost(id, simpleInputParameter, options).then((request) => request(this.axios, this.basePath));
    }
}


